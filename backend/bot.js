const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();
const axios = require('axios');

if (!process.env.TELEGRAM_BOT_TOKEN || !process.env.WEBAPP_URL) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å TELEGRAM_BOT_TOKEN –∏ WEBAPP_URL –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

const token = process.env.TELEGRAM_BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL;
const bot = new TelegramBot(token, { polling: true });

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞:', error.message);
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', (msg) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg.text, '–æ—Ç', msg.from.username || msg.from.id);
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç', msg.from.username || msg.from.id);

  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üî• –û—Ç–∫—Ä—ã—Ç—å —Ç—Ä–µ–Ω–¥—ã', web_app: { url: webAppUrl } }]
      ]
    }
  };

  bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', keyboard)
    .then(() => console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err.message));
});

// –ö–æ–º–∞–Ω–¥–∞ /trends
bot.onText(/\/trends/, async (msg) => {
  const chatId = msg.chat.id;
  console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /trends –æ—Ç', msg.from.username || msg.from.id);

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã —á–µ—Ä–µ–∑ API
    const fetchResponse = await axios.get(`${process.env.CLOUDFLARE_WORKER_URL}/api/fetch-trends`);
    if (fetchResponse.data.message === 'Trends fetched and saved successfully') {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã
      const trendsResponse = await axios.get(`${process.env.CLOUDFLARE_WORKER_URL}/api/trends`);
      const trends = trendsResponse.data;

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–¥–∞–º–∏
      let message = '–¢—Ä–µ–Ω–¥—ã TikTok:\n\n';
      trends.forEach((trend, index) => {
        message += `${index + 1}. ${trend.title}\n–•–µ—à—Ç–µ–≥–∏: ${trend.hashtags.join(', ')}\nURL: ${trend.playUrl}\n\n`;
      });

      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    console.error('Error fetching trends:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥...');
