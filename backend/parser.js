const axios = require('axios');
require('dotenv').config();
const fs = require('fs');
const path = require('path');

async function parseTrends() {
  try {
    const TREND_API_URL = process.env.TREND_API_URL;
    const TREND_API_KEY = process.env.TREND_API_KEY;

    if (!TREND_API_URL || !TREND_API_KEY) {
      throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TREND_API_URL –∏–ª–∏ TREND_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env');
    }

    console.log('üëâ –ó–∞–ø—Ä–æ—Å –∫ API:', TREND_API_URL);

    const response = await axios.get(TREND_API_URL, {
      headers: {
        'X-RapidAPI-Key': TREND_API_KEY,
        'X-RapidAPI-Host': 'tiktok-scraper7.p.rapidapi.com'
      },
      params: {
        keywords: 'fyp',
        region: 'us',
        count: 10,
        cursor: 0,
        publish_time: 0,
        sort_type: 0
      }
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!response.data || response.data.code !== 0 || !response.data.data?.videos) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª–µ "data.videos" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º ID
    const trends = response.data.data.videos.map(item => ({
      id: item.aweme_id, // –î–æ–±–∞–≤–ª–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      title: item.title || 'N/A',
      hashtags: item.challenges && item.challenges.length > 0 
        ? item.challenges.map(ch => ch.title).filter(tag => tag) 
        : [],
      playUrl: item.play || 'N/A', // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ API
      cover: item.cover || 'N/A'  // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ API
    }));

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const trendsPath = path.join(__dirname, 'trends.json');
    fs.writeFileSync(trendsPath, JSON.stringify(trends, null, 2));
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', trendsPath);

    return trends;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:', error.message);
    return null;
  }
}

module.exports = { parseTrends };
