const axios = require('axios');
require('dotenv').config();
const fs = require('fs');
const path = require('path');

async function parseTrends() {
  try {
    const TREND_API_URL = process.env.TREND_API_URL;
    const TREND_API_KEY = process.env.TREND_API_KEY;

    if (!TREND_API_URL || !TREND_API_KEY) {
      throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ TREND_API_URL –∏–ª–∏ TREND_API_KEY –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env');
    }

    console.log('üëâ –ó–∞–ø—Ä–æ—Å –∫ API:', TREND_API_URL);

    const response = await axios.get(TREND_API_URL, {
      headers: {
        'X-RapidAPI-Key': TREND_API_KEY,
        'X-RapidAPI-Host': 'tiktok-scraper7.p.rapidapi.com'
      },
      params: {
        keywords: 'fyp',
        region: 'us',
        count: 10,
        cursor: 0,
        publish_time: 0,
        sort_type: 0
      }
    });

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω. –°—Ç–∞—Ç—É—Å:', response.status);
    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!response.data || response.data.code !== 0 || !response.data.data?.videos) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª–µ "data.videos" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }

    // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const trends = response.data.data.videos.map(item => {
      // –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ö—ç—à—Ç–µ–≥–æ–≤
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤:', JSON.stringify(item.challenges, null, 2));
      
      return {
        title: item.title || 'N/A',
        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à—Ç–µ–≥–æ–≤
        hashtags: item.challenges && item.challenges.length > 0 
          ? item.challenges.map(ch => ch.title).filter(tag => tag) 
          : [],
        playUrl: item.play || 'N/A',
        cover: item.cover || 'N/A'
      };
    });

    console.log('üìù –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:', JSON.stringify(trends, null, 2));

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const trendsPath = path.join(__dirname, 'trends.json');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.stringify(trends, null, 2));
    fs.writeFileSync(trendsPath, JSON.stringify(trends, null, 2));
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:', trendsPath);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
    const savedData = fs.readFileSync(trendsPath, 'utf-8');
    console.log('üìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ trends.json:', savedData);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:', error.message);
    if (error.response) {
      console.error('‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:', error.response.status);
      console.error('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    } else {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }
  }
}

module.exports = { parseTrends };
